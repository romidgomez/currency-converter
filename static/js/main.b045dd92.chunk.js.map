{"version":3,"sources":["helpers/ajax-call.js","components/index.js","App.js","reportWebVitals.js","index.js"],"names":["ajaxCall","URL","action","xhr","XMLHttpRequest","onload","readyState","DONE","status","response","JSON","parse","console","error","responseText","onerror","open","send","CurrencyBlock","amountValue","onChange","onSelectCurrency","dropdownType","dropdownOptions","dropdownValue","className","name","value","options","currency","baseURL","App","props","setData","data","rates","base","defaultCurrency","Object","keys","currencyValues","exchangeRate","setState","fromCurrency","toCurrency","changeCurrency","type","onChangeAmount","e","isFromCurrency","target","amount","isNaN","displayErrorMessage","state","this","prevProps","prevState","fromAmount","toAmount","Number","toFixed","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b045dd92.chunk.js","sourcesContent":["const ajaxCall = (URL, action) => {\n   var xhr = new XMLHttpRequest()\n   xhr.onload = function() {\n    if (xhr.readyState === xhr.DONE && xhr.status === 200) {\n      const response = JSON.parse(xhr.response)\n      action(response)\n    } else {\n      console.error(JSON.parse(xhr.responseText))\n    }\n  }\n  xhr.onerror = function() {\n    console.error(JSON.parse(xhr.responseText))\n  }\n  xhr.open('GET', URL)\n  xhr.send()\n}\n\nexport default ajaxCall","import Dropdown from 'react-dropdown';\n\nexport const CurrencyBlock = ({ amountValue, onChange, onSelectCurrency, dropdownType, dropdownOptions, dropdownValue }) => {\n  return(\n    <div className={`d-flex flex-column b-white currency-container ${ dropdownType === 'fromCurrency' ? 'b-white border-left' : 'b-grey border-right'}`}>\n      <p className=\"bold pb-20\">{ dropdownType === 'fromCurrency' ? 'You have' : 'You get' }</p>\n      <div className=\"d-flex align-center justify-between\">\n        <input\n          className=\"mr-10 w-100\"\n          name={ dropdownType }\n          value={ amountValue }\n          onChange={ onChange }\n        />\n        <Dropdown\n          options={ dropdownOptions }\n          onChange={ currency => onSelectCurrency(currency, dropdownType) }\n          value={ dropdownValue }\n        />\n      </div>\n    </div>\n  )\n}","import React, { Component, Fragment } from 'react'\nimport './css/App.css'\nimport ajaxCall from './helpers/ajax-call'\nimport 'react-dropdown/style.css'\nimport { CurrencyBlock } from './components'\n\nconst baseURL = 'https://api.exchangeratesapi.io/latest'\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      currencyValues: [],\n      fromCurrency: null,\n      toCurrency: null,\n      exchangeRate: null,\n      amount: 1,\n      isFromCurrency: true,\n      displayErrorMessage: false\n    }\n  }\n\n  componentWillMount(){\n    ajaxCall(baseURL, this.setData)\n  }\n\n  componentWillUpdate( prevProps, prevState){\n    const { fromCurrency, toCurrency } = prevState\n    if( fromCurrency !== this.state.fromCurrency || toCurrency !== this.state.toCurrency ){\n      ajaxCall(`${ baseURL }?base=${ fromCurrency }&symbols=${ toCurrency }`, this.changeCurrency)\n    }\n  }\n\n  setData = data => {\n    const { rates, base } = data\n    const defaultCurrency = Object.keys(rates)[1]\n    const currencyValues = [ base, ...Object.keys(rates) ]\n    const exchangeRate = rates[defaultCurrency]\n    this.setState({ currencyValues, fromCurrency: base, toCurrency: defaultCurrency, exchangeRate })\n  }\n\n  changeCurrency = data => {\n    const exchangeRate = data.rates[Object.keys(data.rates)[0]]\n    this.setState({ exchangeRate })\n  }\n\n  onSelectCurrency = ( currency, type ) => {\n    type === 'fromCurrency' ? this.setState({ fromCurrency: currency.value }) : this.setState({ toCurrency: currency.value })\n  }\n\n  onChangeAmount = e => {\n    const { value, name } = e.target\n    const amount = value\n    if(isNaN(amount)){\n      this.setState({ displayErrorMessage: true })\n    } else {\n      let isFromCurrency\n      name === 'fromCurrency' ? isFromCurrency = true : isFromCurrency = false\n      this.setState({ amount, isFromCurrency, displayErrorMessage: false })\n    }\n  }\n\n  render(){\n    const { currencyValues, fromCurrency, toCurrency, exchangeRate, amount, isFromCurrency, displayErrorMessage } = this.state\n    let fromAmount, toAmount\n    if( isFromCurrency ){\n      fromAmount = amount\n      toAmount = Number((amount * exchangeRate).toFixed(2))\n    } else {\n      fromAmount = Number((amount / exchangeRate).toFixed(2))\n      toAmount = amount\n    }\n    return (\n      <Fragment>\n        { displayErrorMessage \n          ? <p className=\"error-label\">Please input a number :)</p>\n          : null\n        } \n        <div className=\"container\">\n          <div className=\"d-flex align-center justify-center pr-20 pl-20\">\n            <CurrencyBlock\n              dropdownType=\"fromCurrency\"\n              amountValue={ fromAmount }\n              dropdownValue={ fromCurrency }\n              onChange={ this.onChangeAmount }\n              dropdownOptions={ currencyValues }\n              onSelectCurrency={ this.onSelectCurrency }\n            />\n            <CurrencyBlock\n              dropdownType=\"toCurrency\"\n              amountValue={ toAmount }\n              dropdownValue={ toCurrency }\n              onChange={ this.onChangeAmount }\n              dropdownOptions={ currencyValues }\n              onSelectCurrency={ this.onSelectCurrency }\n            />\n          </div>\n        </div>\n      </Fragment>\n    )\n  }\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}